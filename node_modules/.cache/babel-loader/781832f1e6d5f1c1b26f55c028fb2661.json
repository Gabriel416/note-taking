{"ast":null,"code":"var _jsxFileName = \"/Users/gabriel/code/note-taking/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport NotesContainer from './components/NotesContainer';\nimport EditorContainer from './components/EditorContainer';\nimport { db } from './firebase';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  useEffect(() => {\n    const fetchedNotes = db.collection('notes').orderBy('createdAt').onSnapshot(snapshot => {\n      const data = snapshot.docs.map(doc => {\n        return { ...doc.data(),\n          id: doc.id\n        };\n      });\n      setNotes(data.reverse());\n    });\n    return fetchedNotes;\n  }, []);\n  useEffect(() => {\n    if (selectedNote) {\n      const updatedSelectedRecord = notes.find(({\n        id\n      }) => id === selectedNote.id);\n\n      if (updatedSelectedRecord) {\n        setSelectedNote(updatedSelectedRecord);\n      }\n    }\n  }, [notes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-wrapper box\",\n    children: [/*#__PURE__*/_jsxDEV(NotesContainer, {\n      notes: notes,\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditorContainer, {\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"qbGquP2p7RG0CZcWa6OuyKTgb44=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gabriel/code/note-taking/client/src/App.js"],"names":["React","useState","useEffect","NotesContainer","EditorContainer","db","App","notes","setNotes","selectedNote","setSelectedNote","fetchedNotes","collection","orderBy","onSnapshot","snapshot","data","docs","map","doc","id","reverse","updatedSelectedRecord","find"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,SAASC,EAAT,QAAmB,YAAnB;AAEA,OAAO,WAAP;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,IAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,YAAY,GAAGN,EAAE,CAACO,UAAH,CAAc,OAAd,EAClBC,OADkB,CACV,WADU,EAElBC,UAFkB,CAEPC,QAAQ,IAAI;AACtB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AACpC,eAAO,EACL,GAAGA,GAAG,CAACH,IAAJ,EADE;AAELI,UAAAA,EAAE,EAAED,GAAG,CAACC;AAFH,SAAP;AAID,OALY,CAAb;AAQAZ,MAAAA,QAAQ,CAACQ,IAAI,CAACK,OAAL,EAAD,CAAR;AACD,KAZkB,CAArB;AAeA,WAAOV,YAAP;AACD,GAjBQ,EAiBN,EAjBM,CAAT;AAmBAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,YAAJ,EAAkB;AAChB,YAAMa,qBAAqB,GAAGf,KAAK,CAACgB,IAAN,CAAW,CAAC;AAAEH,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKX,YAAY,CAACW,EAA3C,CAA9B;;AACA,UAAIE,qBAAJ,EAA2B;AACzBZ,QAAAA,eAAe,CAACY,qBAAD,CAAf;AACD;AACF;AACF,GAPQ,EAON,CAACf,KAAD,CAPM,CAAT;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,KAAK,EAAEA,KADT;AAEE,MAAA,YAAY,EAAEE,YAFhB;AAGE,MAAA,eAAe,EAAEC;AAHnB;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,eAAD;AACE,MAAA,YAAY,EAAED,YADhB;AAEE,MAAA,eAAe,EAAEC;AAFnB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA9CD;;GAAMJ,G;;KAAAA,G;AAgDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport NotesContainer from './components/NotesContainer';\nimport EditorContainer from './components/EditorContainer';\n\nimport { db } from './firebase';\n\nimport './App.css';\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  useEffect(() => {\n    const fetchedNotes = db.collection('notes')\n      .orderBy('createdAt')\n      .onSnapshot(snapshot => {\n        const data = snapshot.docs.map(doc => {\n          return {\n            ...doc.data(),\n            id: doc.id\n          }\n        });\n\n\n        setNotes(data.reverse());\n      });\n\n\n    return fetchedNotes;\n  }, [])\n\n  useEffect(() => {\n    if (selectedNote) {\n      const updatedSelectedRecord = notes.find(({ id }) => id === selectedNote.id);\n      if (updatedSelectedRecord) {\n        setSelectedNote(updatedSelectedRecord);\n      }\n    }\n  }, [notes])\n\n\n  return (\n    <div className=\"app-wrapper box\">\n      <NotesContainer\n        notes={notes}\n        selectedNote={selectedNote}\n        setSelectedNote={setSelectedNote}\n      />\n      <EditorContainer\n        selectedNote={selectedNote}\n        setSelectedNote={setSelectedNote}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}