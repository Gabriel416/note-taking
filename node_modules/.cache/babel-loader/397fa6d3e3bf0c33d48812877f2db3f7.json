{"ast":null,"code":"var _jsxFileName = \"/Users/gabriel/code/note-taking/client/src/components/EditorContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding, ContentState, convertFromRaw, CompositeDecorator, convertToRaw } from 'draft-js';\nimport BlockStyleControls from '../BlockStyleControls';\nimport InlineStyleControls from '../InlineStyleControls';\nimport LinkControls from '../LinkControls';\nimport Link from '../Link';\nimport { validURL, findLinkEntities } from '../../utils';\nimport { EDITOR_STYLE_MAP } from '../../constants';\nimport { add, update } from '../../http';\nimport './editor_container.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorContainer = ({\n  selectedNote,\n  setSelectedNote\n}) => {\n  _s();\n\n  const decorators = new CompositeDecorator([{\n    strategy: findLinkEntities,\n    component: Link\n  }]);\n  const editor = useRef(null);\n  const urlRef = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [successMsg, setSuccessMsg] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [showURLInput, setShowURLInput] = useState(false);\n  const [urlValue, setUrlValue] = useState('');\n  const [editorState, setEditorState] = useState(EditorState.createEmpty(decorators));\n  useEffect(() => {\n    focusEditor();\n  }, []);\n  useEffect(() => {\n    if (selectedNote) {\n      onChange(EditorState.createWithContent(convertFromRaw(JSON.parse(selectedNote.body)), decorators));\n    }\n  }, [selectedNote]);\n\n  const promptForLink = e => {\n    e.preventDefault();\n    const selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      const contentState = editorState.getCurrentContent();\n      const startKey = editorState.getSelection().getStartKey();\n      const startOffset = editorState.getSelection().getStartOffset();\n      const blockWithLinkAtBeginning = contentState.getBlockForKey(startKey);\n      const linkKey = blockWithLinkAtBeginning.getEntityAt(startOffset);\n      let url = '';\n\n      if (linkKey) {\n        const linkInstance = contentState.getEntity(linkKey);\n        url = linkInstance.getData().url;\n      }\n\n      setShowURLInput(true);\n      setUrlValue(url);\n    }\n  };\n\n  const onLinkInputKeyDown = e => {\n    if (e.which === 13) {\n      confirmLink(e);\n    }\n  };\n\n  const confirmLink = e => {\n    e.preventDefault();\n\n    if (!validURL(urlValue)) {\n      alert('invalid url');\n      return;\n    }\n\n    const contentState = editorState.getCurrentContent();\n    const contentStateWithEntity = contentState.createEntity('LINK', 'MUTABLE', {\n      url: urlValue\n    });\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    const newEditorState = EditorState.set(editorState, {\n      currentContent: contentStateWithEntity\n    });\n    setEditorState(RichUtils.toggleLink(newEditorState, newEditorState.getSelection(), entityKey));\n    setShowURLInput(false);\n    setUrlValue('');\n  };\n\n  const removeLink = e => {\n    e.preventDefault();\n    const selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      setEditorState(RichUtils.toggleLink(editorState, selection, null));\n    }\n  };\n\n  const focusEditor = () => {\n    editor.current.focus();\n  };\n\n  const onChange = editorState => setEditorState(editorState);\n\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      onChange(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  };\n\n  const mapKeyToEditorCommand = e => {\n    if (e.keyCode === 9\n    /* TAB */\n    ) {\n        const newEditorState = RichUtils.onTab(e, editorState, 4\n        /* maxDepth */\n        );\n\n        if (newEditorState !== editorState) {\n          onChange(newEditorState);\n        }\n\n        return;\n      }\n\n    return getDefaultKeyBinding(e);\n  };\n\n  const toggleBlockType = blockType => {\n    onChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = inlineStyle => {\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  const getBlockStyle = block => {\n    switch (block.getType()) {\n      case 'blockquote':\n        return 'RichEditor-blockquote';\n\n      default:\n        return null;\n    }\n  };\n\n  const isSubmittable = () => {\n    return convertToRaw(editorState.getCurrentContent()).blocks.some(({\n      text\n    }) => text.trim());\n  };\n\n  const getButtonText = () => {\n    let btnText = '';\n\n    if (loading) {\n      btnText = 'Saving...';\n    } else if (selectedNote) {\n      btnText = 'Update';\n    } else {\n      btnText = 'Save';\n    }\n\n    return btnText;\n  };\n\n  const save = contentState => {\n    const body = JSON.stringify(contentState);\n\n    if (selectedNote) {\n      return update(body, selectedNote.id);\n    }\n\n    return add(body);\n  };\n\n  const saveNote = async () => {\n    setSuccessMsg('');\n    setErrorMsg('');\n    setLoading(true);\n    const contentState = convertToRaw(editorState.getCurrentContent());\n\n    if (isSubmittable()) {\n      try {\n        await save(contentState);\n        setSuccessMsg('Successfully saved note!');\n      } catch (e) {\n        console.log(e, 'e');\n        setErrorMsg('Error saving note :(');\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"flex space-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"ml-1\",\n        children: [selectedNote ? 'Update' : 'Create', \" Note\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), selectedNote && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn primary small\",\n        onClick: () => setSelectedNote(null),\n        children: \"New Note +\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: toggleBlockType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: toggleInlineStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LinkControls, {\n      promptForLink: promptForLink,\n      showURLInput: showURLInput,\n      removeLink: removeLink,\n      onLinkInputKeyDown: onLinkInputKeyDown,\n      confirmLink: confirmLink,\n      urlRef: urlRef,\n      urlValue: urlValue,\n      setUrlValue: setUrlValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      ref: editor,\n      editorState: editorState,\n      onChange: onChange,\n      handleKeyCommand: handleKeyCommand,\n      keyBindingFn: mapKeyToEditorCommand,\n      blockStyleFn: getBlockStyle,\n      customStyleMap: EDITOR_STYLE_MAP\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: loading || !isSubmittable(),\n        className: \"btn primary\",\n        onClick: () => saveNote(),\n        children: getButtonText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), successMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success right\",\n      children: successMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 28\n    }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error right\",\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditorContainer, \"h+/rt8RcJ1v7vrCplc/vWyU6Dsk=\");\n\n_c = EditorContainer;\nexport default EditorContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorContainer\");","map":{"version":3,"sources":["/Users/gabriel/code/note-taking/client/src/components/EditorContainer/index.js"],"names":["React","useState","useEffect","useRef","Editor","EditorState","RichUtils","getDefaultKeyBinding","ContentState","convertFromRaw","CompositeDecorator","convertToRaw","BlockStyleControls","InlineStyleControls","LinkControls","Link","validURL","findLinkEntities","EDITOR_STYLE_MAP","add","update","EditorContainer","selectedNote","setSelectedNote","decorators","strategy","component","editor","urlRef","loading","setLoading","successMsg","setSuccessMsg","errorMsg","setErrorMsg","showURLInput","setShowURLInput","urlValue","setUrlValue","editorState","setEditorState","createEmpty","focusEditor","onChange","createWithContent","JSON","parse","body","promptForLink","e","preventDefault","selection","getSelection","isCollapsed","contentState","getCurrentContent","startKey","getStartKey","startOffset","getStartOffset","blockWithLinkAtBeginning","getBlockForKey","linkKey","getEntityAt","url","linkInstance","getEntity","getData","onLinkInputKeyDown","which","confirmLink","alert","contentStateWithEntity","createEntity","entityKey","getLastCreatedEntityKey","newEditorState","set","currentContent","toggleLink","removeLink","current","focus","handleKeyCommand","command","newState","mapKeyToEditorCommand","keyCode","onTab","toggleBlockType","blockType","toggleInlineStyle","inlineStyle","getBlockStyle","block","getType","isSubmittable","blocks","some","text","trim","getButtonText","btnText","save","stringify","id","saveNote","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding, ContentState, convertFromRaw, CompositeDecorator, convertToRaw } from 'draft-js';\n\nimport BlockStyleControls from '../BlockStyleControls';\nimport InlineStyleControls from '../InlineStyleControls';\nimport LinkControls from '../LinkControls';\nimport Link from '../Link';\n\nimport { validURL, findLinkEntities } from '../../utils';\nimport { EDITOR_STYLE_MAP } from '../../constants';\nimport { add, update } from '../../http';\n\nimport './editor_container.css';\n\n\nconst EditorContainer = ({ selectedNote, setSelectedNote }) => {\n    const decorators = new CompositeDecorator([\n        {\n            strategy: findLinkEntities,\n            component: Link,\n        },\n    ]);\n    const editor = useRef(null);\n    const urlRef = useRef(null);\n    const [loading, setLoading] = useState(false);\n    const [successMsg, setSuccessMsg] = useState('');\n    const [errorMsg, setErrorMsg] = useState('');\n    const [showURLInput, setShowURLInput] = useState(false);\n    const [urlValue, setUrlValue] = useState('');\n    const [editorState, setEditorState] = useState(\n        EditorState.createEmpty(decorators)\n    );\n\n    useEffect(() => {\n        focusEditor()\n    }, []);\n\n    useEffect(() => {\n        if (selectedNote) {\n            onChange(EditorState.createWithContent(convertFromRaw(JSON.parse(selectedNote.body)), decorators))\n        }\n    }, [selectedNote]);\n\n\n    const promptForLink = (e) => {\n        e.preventDefault();\n        const selection = editorState.getSelection();\n        if (!selection.isCollapsed()) {\n            const contentState = editorState.getCurrentContent();\n            const startKey = editorState.getSelection().getStartKey();\n            const startOffset = editorState.getSelection().getStartOffset();\n            const blockWithLinkAtBeginning = contentState.getBlockForKey(startKey);\n            const linkKey = blockWithLinkAtBeginning.getEntityAt(startOffset);\n\n            let url = '';\n            if (linkKey) {\n                const linkInstance = contentState.getEntity(linkKey);\n                url = linkInstance.getData().url;\n            }\n\n            setShowURLInput(true);\n            setUrlValue(url);\n        }\n    }\n\n    const onLinkInputKeyDown = (e) => {\n        if (e.which === 13) {\n            confirmLink(e);\n        }\n    }\n\n    const confirmLink = (e) => {\n        e.preventDefault();\n        if (!validURL(urlValue)) {\n            alert('invalid url');\n            return;\n        }\n        const contentState = editorState.getCurrentContent();\n        const contentStateWithEntity = contentState.createEntity(\n            'LINK',\n            'MUTABLE',\n            { url: urlValue }\n        );\n        const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n        const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity });\n        setEditorState(RichUtils.toggleLink(\n            newEditorState,\n            newEditorState.getSelection(),\n            entityKey\n        ));\n        setShowURLInput(false);\n        setUrlValue('');\n    }\n\n    const removeLink = (e) => {\n        e.preventDefault();\n        const selection = editorState.getSelection();\n        if (!selection.isCollapsed()) {\n            setEditorState(RichUtils.toggleLink(editorState, selection, null));\n        }\n    }\n\n    const focusEditor = () => {\n        editor.current.focus();\n    }\n\n    const onChange = editorState => setEditorState(editorState);\n\n    const handleKeyCommand = (command, editorState) => {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n\n        if (newState) {\n            onChange(newState);\n            return 'handled';\n        }\n\n        return 'not-handled';\n    }\n\n    const mapKeyToEditorCommand = (e) => {\n        if (e.keyCode === 9 /* TAB */) {\n            const newEditorState = RichUtils.onTab(\n                e,\n                editorState,\n                4, /* maxDepth */\n            );\n            if (newEditorState !== editorState) {\n                onChange(newEditorState);\n            }\n            return;\n        }\n        return getDefaultKeyBinding(e);\n    }\n\n    const toggleBlockType = (blockType) => {\n        onChange(\n            RichUtils.toggleBlockType(\n                editorState,\n                blockType\n            )\n        );\n    }\n\n    const toggleInlineStyle = (inlineStyle) => {\n        onChange(\n            RichUtils.toggleInlineStyle(\n                editorState,\n                inlineStyle\n            )\n        );\n    }\n\n    const getBlockStyle = (block) => {\n        switch (block.getType()) {\n            case 'blockquote': return 'RichEditor-blockquote';\n            default: return null;\n        }\n    }\n    const isSubmittable = () => {\n        return convertToRaw(editorState.getCurrentContent()).blocks.some(({ text }) => text.trim())\n    };\n\n    const getButtonText = () => {\n        let btnText = '';\n\n        if (loading) {\n            btnText = 'Saving...'\n        } else if (selectedNote) {\n            btnText = 'Update'\n        } else {\n            btnText = 'Save'\n        }\n\n        return btnText;\n    }\n\n    const save = (contentState) => {\n        const body = JSON.stringify(contentState);\n        if (selectedNote) {\n            return update(body, selectedNote.id);\n        }\n\n        return add(body);\n    }\n\n    const saveNote = async () => {\n        setSuccessMsg('');\n        setErrorMsg('');\n        setLoading(true);\n        const contentState = convertToRaw(editorState.getCurrentContent());\n        if (isSubmittable()) {\n            try {\n                await save(contentState);\n                setSuccessMsg('Successfully saved note!');\n            } catch (e) {\n                console.log(e, 'e')\n                setErrorMsg('Error saving note :(')\n            } finally {\n                setLoading(false);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <section className=\"flex space-between\">\n                <h2 className=\"ml-1\">{selectedNote ? 'Update' : 'Create'} Note</h2>\n                {selectedNote && <button className=\"btn primary small\" onClick={() => setSelectedNote(null)}>New Note +</button>}\n            </section>\n            <BlockStyleControls\n                editorState={editorState}\n                onToggle={toggleBlockType}\n            />\n            <InlineStyleControls\n                editorState={editorState}\n                onToggle={toggleInlineStyle}\n            />\n            <LinkControls\n                promptForLink={promptForLink}\n                showURLInput={showURLInput}\n                removeLink={removeLink}\n                onLinkInputKeyDown={onLinkInputKeyDown}\n                confirmLink={confirmLink}\n                urlRef={urlRef}\n                urlValue={urlValue}\n                setUrlValue={setUrlValue}\n            />\n            <Editor\n                ref={editor}\n                editorState={editorState}\n                onChange={onChange}\n                handleKeyCommand={handleKeyCommand}\n                keyBindingFn={mapKeyToEditorCommand}\n                blockStyleFn={getBlockStyle}\n                customStyleMap={EDITOR_STYLE_MAP}\n            />\n            <div className=\"btn-wrapper\">\n                <button disabled={loading || !isSubmittable()} className=\"btn primary\" onClick={() => saveNote()}>{getButtonText()}</button>\n            </div>\n            {successMsg && <p className=\"success right\">{successMsg}</p>}\n            {errorMsg && <p className=\"error right\">{errorMsg}</p>}\n        </div >\n    );\n}\n\nexport default EditorContainer;"]},"metadata":{},"sourceType":"module"}