{"ast":null,"code":"var _jsxFileName = \"/Users/gabriel/code/note-taking/client/src/components/EditorContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Editor, EditorState, RichUtils, convertFromRaw, convertToRaw } from 'draft-js';\nimport BlockStyleControls from '../BlockStyleControls';\nimport InlineStyleControls from '../InlineStyleControls';\nimport { EDITOR_STYLE_MAP } from '../../constants';\nimport { CREATE_NOTE, UPDATE_NOTE } from '../../Mutations';\nimport './editor_container.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorContainer = ({\n  refetch,\n  selectedNote,\n  setSelectedNote\n}) => {\n  _s();\n\n  const editor = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [successMsg, setSuccessMsg] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const [createNote, {\n    data\n  }] = useMutation(CREATE_NOTE);\n  const [updateNote, {\n    updateNoteData\n  }] = useMutation(UPDATE_NOTE);\n  useEffect(() => {\n    focusEditor();\n  }, []);\n  useEffect(() => {\n    if (selectedNote) {\n      onChange(EditorState.createWithContent(convertFromRaw(JSON.parse(selectedNote.body))));\n    }\n  }, [selectedNote]);\n\n  const focusEditor = () => {\n    editor.current.focus();\n  };\n\n  const onChange = editorState => setEditorState(editorState);\n\n  const toggleBlockType = blockType => {\n    onChange(RichUtils.toggleBlockType(editorState, blockType));\n  };\n\n  const toggleInlineStyle = inlineStyle => {\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle));\n  };\n\n  const getBlockStyle = block => {\n    switch (block.getType()) {\n      case 'blockquote':\n        return 'RichEditor-blockquote';\n\n      default:\n        return null;\n    }\n  };\n\n  const isSubmittable = () => {\n    return convertToRaw(editorState.getCurrentContent()).blocks.some(({\n      text\n    }) => text.trim());\n  };\n\n  const getButtonText = () => {\n    let btnText = '';\n\n    if (loading) {\n      btnText = 'Saving...';\n    } else if (selectedNote) {\n      btnText = 'Update';\n    } else {\n      btnText = 'Save';\n    }\n\n    return btnText;\n  };\n\n  const save = contentState => {\n    const request = {\n      variables: {\n        body: JSON.stringify(contentState)\n      }\n    };\n\n    if (selectedNote) {\n      updateNote({ ...request,\n        variables: { ...request.variables,\n          id: selectedNote.id\n        }\n      });\n    }\n\n    createNote(request);\n    console.log(data, 'meme');\n  };\n\n  const saveNote = async () => {\n    setSuccessMsg('');\n    setErrorMsg('');\n    setLoading(true);\n    const contentState = convertToRaw(editorState.getCurrentContent());\n\n    if (isSubmittable()) {\n      try {\n        await save(contentState);\n        setSuccessMsg('Successfully saved note!');\n      } catch (e) {\n        console.log(e, 'e');\n        setErrorMsg('Error saving note :(');\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"flex space-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"ml-1\",\n        children: [selectedNote ? 'Update' : 'Create', \" Note\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), selectedNote && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn primary small\",\n        onClick: () => setSelectedNote(null),\n        children: \"New Note +\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: toggleBlockType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: toggleInlineStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      ref: editor,\n      editorState: editorState,\n      onChange: onChange,\n      blockStyleFn: getBlockStyle,\n      customStyleMap: EDITOR_STYLE_MAP\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: loading || !isSubmittable(),\n        className: \"btn primary\",\n        onClick: () => saveNote(),\n        children: getButtonText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), successMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success right\",\n      children: successMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 28\n    }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error right\",\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditorContainer, \"UuDCjdoxSWG20bLa8iUtfJTDYS0=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = EditorContainer;\nexport default EditorContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorContainer\");","map":{"version":3,"sources":["/Users/gabriel/code/note-taking/client/src/components/EditorContainer/index.js"],"names":["React","useState","useEffect","useRef","useMutation","Editor","EditorState","RichUtils","convertFromRaw","convertToRaw","BlockStyleControls","InlineStyleControls","EDITOR_STYLE_MAP","CREATE_NOTE","UPDATE_NOTE","EditorContainer","refetch","selectedNote","setSelectedNote","editor","loading","setLoading","successMsg","setSuccessMsg","errorMsg","setErrorMsg","editorState","setEditorState","createEmpty","createNote","data","updateNote","updateNoteData","focusEditor","onChange","createWithContent","JSON","parse","body","current","focus","toggleBlockType","blockType","toggleInlineStyle","inlineStyle","getBlockStyle","block","getType","isSubmittable","getCurrentContent","blocks","some","text","trim","getButtonText","btnText","save","contentState","request","variables","stringify","id","console","log","saveNote","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,SAA9B,EAAyCC,cAAzC,EAAyDC,YAAzD,QAA6E,UAA7E;AAEA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AAEA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,iBAAzC;AAEA,OAAO,wBAAP;;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA;AAAzB,CAAD,KAAgD;AAAA;;AACpE,QAAMC,MAAM,GAAGhB,MAAM,CAAC,IAAD,CAArB;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACyB,WAAD,EAAcC,cAAd,IAAgC1B,QAAQ,CAC1CK,WAAW,CAACsB,WAAZ,EAD0C,CAA9C;AAGA,QAAM,CAACC,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAAyB1B,WAAW,CAACS,WAAD,CAA1C;AACA,QAAM,CAACkB,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAAmC5B,WAAW,CAACU,WAAD,CAApD;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA/B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,YAAJ,EAAkB;AACdiB,MAAAA,QAAQ,CAAC5B,WAAW,CAAC6B,iBAAZ,CAA8B3B,cAAc,CAAC4B,IAAI,CAACC,KAAL,CAAWpB,YAAY,CAACqB,IAAxB,CAAD,CAA5C,CAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACrB,YAAD,CAJM,CAAT;;AAMA,QAAMgB,WAAW,GAAG,MAAM;AACtBd,IAAAA,MAAM,CAACoB,OAAP,CAAeC,KAAf;AACH,GAFD;;AAIA,QAAMN,QAAQ,GAAGR,WAAW,IAAIC,cAAc,CAACD,WAAD,CAA9C;;AAEA,QAAMe,eAAe,GAAIC,SAAD,IAAe;AACnCR,IAAAA,QAAQ,CACJ3B,SAAS,CAACkC,eAAV,CACIf,WADJ,EAEIgB,SAFJ,CADI,CAAR;AAMH,GAPD;;AASA,QAAMC,iBAAiB,GAAIC,WAAD,IAAiB;AACvCV,IAAAA,QAAQ,CACJ3B,SAAS,CAACoC,iBAAV,CACIjB,WADJ,EAEIkB,WAFJ,CADI,CAAR;AAMH,GAPD;;AASA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B,YAAQA,KAAK,CAACC,OAAN,EAAR;AACI,WAAK,YAAL;AAAmB,eAAO,uBAAP;;AACnB;AAAS,eAAO,IAAP;AAFb;AAIH,GALD;;AAOA,QAAMC,aAAa,GAAG,MAAM;AACxB,WAAOvC,YAAY,CAACiB,WAAW,CAACuB,iBAAZ,EAAD,CAAZ,CAA8CC,MAA9C,CAAqDC,IAArD,CAA0D,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcA,IAAI,CAACC,IAAL,EAAxE,CAAP;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AACxB,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAInC,OAAJ,EAAa;AACTmC,MAAAA,OAAO,GAAG,WAAV;AACH,KAFD,MAEO,IAAItC,YAAJ,EAAkB;AACrBsC,MAAAA,OAAO,GAAG,QAAV;AACH,KAFM,MAEA;AACHA,MAAAA,OAAO,GAAG,MAAV;AACH;;AAED,WAAOA,OAAP;AACH,GAZD;;AAcA,QAAMC,IAAI,GAAIC,YAAD,IAAkB;AAC3B,UAAMC,OAAO,GAAG;AACZC,MAAAA,SAAS,EAAE;AACPrB,QAAAA,IAAI,EAAEF,IAAI,CAACwB,SAAL,CAAeH,YAAf;AADC;AADC,KAAhB;;AAMA,QAAIxC,YAAJ,EAAkB;AACdc,MAAAA,UAAU,CAAC,EACP,GAAG2B,OADI;AAEPC,QAAAA,SAAS,EAAE,EACP,GAAGD,OAAO,CAACC,SADJ;AAEPE,UAAAA,EAAE,EAAE5C,YAAY,CAAC4C;AAFV;AAFJ,OAAD,CAAV;AAOH;;AAEDhC,IAAAA,UAAU,CAAC6B,OAAD,CAAV;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYjC,IAAZ,EAAkB,MAAlB;AACH,GAnBD;;AAqBA,QAAMkC,QAAQ,GAAG,YAAY;AACzBzC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMoC,YAAY,GAAGhD,YAAY,CAACiB,WAAW,CAACuB,iBAAZ,EAAD,CAAjC;;AACA,QAAID,aAAa,EAAjB,EAAqB;AACjB,UAAI;AACA,cAAMQ,IAAI,CAACC,YAAD,CAAV;AACAlC,QAAAA,aAAa,CAAC,0BAAD,CAAb;AACH,OAHD,CAGE,OAAO0C,CAAP,EAAU;AACRH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ,EAAe,GAAf;AACAxC,QAAAA,WAAW,CAAC,sBAAD,CAAX;AACH,OAND,SAMU;AACNJ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ;AACJ,GAhBD;;AAkBA,sBACI;AAAA,4BACI;AAAS,MAAA,SAAS,EAAC,oBAAnB;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,mBAAsBJ,YAAY,GAAG,QAAH,GAAc,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKA,YAAY,iBAAI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAsC,QAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,IAAD,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFrB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,kBAAD;AACI,MAAA,WAAW,EAAEQ,WADjB;AAEI,MAAA,QAAQ,EAAEe;AAFd;AAAA;AAAA;AAAA;AAAA,YALJ,eASI,QAAC,mBAAD;AACI,MAAA,WAAW,EAAEf,WADjB;AAEI,MAAA,QAAQ,EAAEiB;AAFd;AAAA;AAAA;AAAA;AAAA,YATJ,eAaI,QAAC,MAAD;AACI,MAAA,GAAG,EAAExB,MADT;AAEI,MAAA,WAAW,EAAEO,WAFjB;AAGI,MAAA,QAAQ,EAAEQ,QAHd;AAII,MAAA,YAAY,EAAEW,aAJlB;AAKI,MAAA,cAAc,EAAEjC;AALpB;AAAA;AAAA;AAAA;AAAA,YAbJ,eAoBI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACI;AAAQ,QAAA,QAAQ,EAAEQ,OAAO,IAAI,CAAC4B,aAAa,EAA3C;AAA+C,QAAA,SAAS,EAAC,aAAzD;AAAuE,QAAA,OAAO,EAAE,MAAMgB,QAAQ,EAA9F;AAAA,kBAAmGV,aAAa;AAAhH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YApBJ,EAuBKhC,UAAU,iBAAI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA,gBAA8BA;AAA9B;AAAA;AAAA;AAAA;AAAA,YAvBnB,EAwBKE,QAAQ,iBAAI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBAA4BA;AAA5B;AAAA;AAAA;AAAA;AAAA,YAxBjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CAzID;;GAAMT,e;UAQ6BX,W,EACUA,W;;;KATvCW,e;AA2IN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Editor, EditorState, RichUtils, convertFromRaw, convertToRaw } from 'draft-js';\n\nimport BlockStyleControls from '../BlockStyleControls';\nimport InlineStyleControls from '../InlineStyleControls';\n\nimport { EDITOR_STYLE_MAP } from '../../constants';\nimport { CREATE_NOTE, UPDATE_NOTE } from '../../Mutations';\n\nimport './editor_container.css';\n\nconst EditorContainer = ({ refetch, selectedNote, setSelectedNote }) => {\n    const editor = useRef(null);\n    const [loading, setLoading] = useState(false);\n    const [successMsg, setSuccessMsg] = useState('');\n    const [errorMsg, setErrorMsg] = useState('');\n    const [editorState, setEditorState] = useState(\n        EditorState.createEmpty()\n    );\n    const [createNote, { data }] = useMutation(CREATE_NOTE);\n    const [updateNote, { updateNoteData }] = useMutation(UPDATE_NOTE);\n\n    useEffect(() => {\n        focusEditor()\n    }, []);\n\n    useEffect(() => {\n        if (selectedNote) {\n            onChange(EditorState.createWithContent(convertFromRaw(JSON.parse(selectedNote.body))))\n        }\n    }, [selectedNote]);\n\n    const focusEditor = () => {\n        editor.current.focus();\n    }\n\n    const onChange = editorState => setEditorState(editorState);\n\n    const toggleBlockType = (blockType) => {\n        onChange(\n            RichUtils.toggleBlockType(\n                editorState,\n                blockType\n            )\n        );\n    }\n\n    const toggleInlineStyle = (inlineStyle) => {\n        onChange(\n            RichUtils.toggleInlineStyle(\n                editorState,\n                inlineStyle\n            )\n        );\n    }\n\n    const getBlockStyle = (block) => {\n        switch (block.getType()) {\n            case 'blockquote': return 'RichEditor-blockquote';\n            default: return null;\n        }\n    }\n\n    const isSubmittable = () => {\n        return convertToRaw(editorState.getCurrentContent()).blocks.some(({ text }) => text.trim())\n    };\n\n    const getButtonText = () => {\n        let btnText = '';\n\n        if (loading) {\n            btnText = 'Saving...'\n        } else if (selectedNote) {\n            btnText = 'Update'\n        } else {\n            btnText = 'Save'\n        }\n\n        return btnText;\n    }\n\n    const save = (contentState) => {\n        const request = {\n            variables: {\n                body: JSON.stringify(contentState)\n            }\n        }\n\n        if (selectedNote) {\n            updateNote({\n                ...request,\n                variables: {\n                    ...request.variables,\n                    id: selectedNote.id\n                }\n            });\n        }\n\n        createNote(request);\n        console.log(data, 'meme')\n    }\n\n    const saveNote = async () => {\n        setSuccessMsg('');\n        setErrorMsg('');\n        setLoading(true);\n        const contentState = convertToRaw(editorState.getCurrentContent());\n        if (isSubmittable()) {\n            try {\n                await save(contentState);\n                setSuccessMsg('Successfully saved note!');\n            } catch (e) {\n                console.log(e, 'e')\n                setErrorMsg('Error saving note :(')\n            } finally {\n                setLoading(false);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <section className=\"flex space-between\">\n                <h2 className=\"ml-1\">{selectedNote ? 'Update' : 'Create'} Note</h2>\n                {selectedNote && <button className=\"btn primary small\" onClick={() => setSelectedNote(null)}>New Note +</button>}\n            </section>\n            <BlockStyleControls\n                editorState={editorState}\n                onToggle={toggleBlockType}\n            />\n            <InlineStyleControls\n                editorState={editorState}\n                onToggle={toggleInlineStyle}\n            />\n            <Editor\n                ref={editor}\n                editorState={editorState}\n                onChange={onChange}\n                blockStyleFn={getBlockStyle}\n                customStyleMap={EDITOR_STYLE_MAP}\n            />\n            <div className=\"btn-wrapper\">\n                <button disabled={loading || !isSubmittable()} className=\"btn primary\" onClick={() => saveNote()}>{getButtonText()}</button>\n            </div>\n            {successMsg && <p className=\"success right\">{successMsg}</p>}\n            {errorMsg && <p className=\"error right\">{errorMsg}</p>}\n        </div >\n    );\n}\n\nexport default EditorContainer;"]},"metadata":{},"sourceType":"module"}