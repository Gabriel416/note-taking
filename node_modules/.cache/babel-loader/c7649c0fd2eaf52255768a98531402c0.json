{"ast":null,"code":"var _jsxFileName = \"/Users/gabriel/code/note-taking/client/src/components/NotesContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { useMutation } from '@apollo/client';\nimport { List } from 'react-content-loader';\nimport { Editor, convertFromRaw, EditorState } from 'draft-js';\nimport { DELETE_NOTE } from '../../Mutations';\nimport './notes_container.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotesContainer = ({\n  error,\n  loading,\n  networkStatus,\n  refetch,\n  notes,\n  selectedNote,\n  setSelectedNote\n}) => {\n  _s();\n\n  console.log(networkStatus, 'network status');\n  const [deleteNote, {\n    updateNoteData\n  }] = useMutation(DELETE_NOTE);\n\n  const handleDelete = async id => {\n    await deleteNote({\n      variables: {\n        id\n      }\n    });\n    refetch();\n  };\n\n  const renderNotes = () => {\n    if (loading || networkStatus === 4) {\n      return Array.from(Array(5)).map((_, i) => /*#__PURE__*/_jsxDEV(List, {}, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 55\n      }, this));\n    } else if (error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Error! ${error}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 20\n      }, this);\n    }\n\n    return notes.map((note, i) => {\n      const isActive = selectedNote ? selectedNote.id === note.id : false;\n      const parsedPost = EditorState.createWithContent(convertFromRaw(JSON.parse(note.body)));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('box', isActive ? 'active-post' : ''),\n        onClick: () => setSelectedNote(note),\n        children: [/*#__PURE__*/_jsxDEV(Editor, {\n          editorState: parsedPost,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn small\",\n          onClick: () => handleDelete(note.id),\n          children: \"Delete Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notes_container_wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"ml-1\",\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), renderNotes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NotesContainer, \"Z9JAKgHL8TvQ84qTfHZkNW1lVm0=\", false, function () {\n  return [useMutation];\n});\n\n_c = NotesContainer;\nexport default NotesContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesContainer\");","map":{"version":3,"sources":["/Users/gabriel/code/note-taking/client/src/components/NotesContainer/index.js"],"names":["React","classnames","useMutation","List","Editor","convertFromRaw","EditorState","DELETE_NOTE","NotesContainer","error","loading","networkStatus","refetch","notes","selectedNote","setSelectedNote","console","log","deleteNote","updateNoteData","handleDelete","id","variables","renderNotes","Array","from","map","_","i","note","isActive","parsedPost","createWithContent","JSON","parse","body"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,WAAjC,QAAoD,UAApD;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,OAAO,uBAAP;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,OAFoB;AAGpBC,EAAAA,aAHoB;AAIpBC,EAAAA,OAJoB;AAKpBC,EAAAA,KALoB;AAMpBC,EAAAA,YANoB;AAOpBC,EAAAA;AAPoB,CAAD,KAQjB;AAAA;;AACFC,EAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ,EAA2B,gBAA3B;AACA,QAAM,CAACO,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAAmCjB,WAAW,CAACK,WAAD,CAApD;;AAEA,QAAMa,YAAY,GAAG,MAAOC,EAAP,IAAc;AAC/B,UAAMH,UAAU,CAAC;AACbI,MAAAA,SAAS,EAAE;AACPD,QAAAA;AADO;AADE,KAAD,CAAhB;AAKAT,IAAAA,OAAO;AACV,GAPD;;AASA,QAAMW,WAAW,GAAG,MAAM;AACtB,QAAIb,OAAO,IAAIC,aAAa,KAAK,CAAjC,EAAoC;AAChC,aAAOa,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,CAAD,CAAhB,EAAqBE,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,kBAAU,QAAC,IAAD,MAAWA,CAAX;AAAA;AAAA;AAAA;AAAA,cAAnC,CAAP;AACH,KAFD,MAEO,IAAInB,KAAJ,EAAW;AACd,0BAAO;AAAA,kBAAK,UAASA,KAAM;AAApB;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,WAAOI,KAAK,CAACa,GAAN,CAAU,CAACG,IAAD,EAAOD,CAAP,KAAa;AAC1B,YAAME,QAAQ,GAAGhB,YAAY,GAAGA,YAAY,CAACO,EAAb,KAAoBQ,IAAI,CAACR,EAA5B,GAAiC,KAA9D;AACA,YAAMU,UAAU,GAAGzB,WAAW,CAAC0B,iBAAZ,CAA8B3B,cAAc,CAAC4B,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,IAAhB,CAAD,CAA5C,CAAnB;AACA,0BACI;AAAa,QAAA,SAAS,EAAElC,UAAU,CAAC,KAAD,EAAQ6B,QAAQ,GAAG,aAAH,GAAmB,EAAnC,CAAlC;AAA0E,QAAA,OAAO,EAAE,MAAMf,eAAe,CAACc,IAAD,CAAxG;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,WAAW,EAAEE,UAArB;AAAiC,UAAA,QAAQ;AAAzC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,SAAS,EAAC,WAAlB;AAA8B,UAAA,OAAO,EAAE,MAAMX,YAAY,CAACS,IAAI,CAACR,EAAN,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUO,CAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KATM,CAAP;AAUH,GAjBD;;AAmBA,sBACI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKL,WAAW,EAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA9CD;;GAAMf,c;UAUuCN,W;;;KAVvCM,c;AAgDN,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { useMutation } from '@apollo/client';\nimport { List } from 'react-content-loader';\nimport { Editor, convertFromRaw, EditorState } from 'draft-js';\n\nimport { DELETE_NOTE } from '../../Mutations';\n\nimport './notes_container.css'\n\nconst NotesContainer = ({\n    error,\n    loading,\n    networkStatus,\n    refetch,\n    notes,\n    selectedNote,\n    setSelectedNote\n}) => {\n    console.log(networkStatus, 'network status')\n    const [deleteNote, { updateNoteData }] = useMutation(DELETE_NOTE);\n\n    const handleDelete = async (id) => {\n        await deleteNote({\n            variables: {\n                id\n            }\n        })\n        refetch()\n    }\n\n    const renderNotes = () => {\n        if (loading || networkStatus === 4) {\n            return Array.from(Array(5)).map((_, i) => <List key={i} />)\n        } else if (error) {\n            return <p>{`Error! ${error}`}</p>\n        }\n\n        return notes.map((note, i) => {\n            const isActive = selectedNote ? selectedNote.id === note.id : false;\n            const parsedPost = EditorState.createWithContent(convertFromRaw(JSON.parse(note.body)));\n            return (\n                <div key={i} className={classnames('box', isActive ? 'active-post' : '')} onClick={() => setSelectedNote(note)}>\n                    <Editor editorState={parsedPost} readOnly />\n                    <button className=\"btn small\" onClick={() => handleDelete(note.id)}>Delete Note</button>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div className=\"notes_container_wrapper\">\n            <h2 className=\"ml-1\">Notes</h2>\n            {renderNotes()}\n        </div>\n    )\n}\n\nexport default NotesContainer;"]},"metadata":{},"sourceType":"module"}