{"version":3,"sources":["Mutations.js","components/NotesContainer/index.js","components/StyleButton/index.js","constants.js","components/BlockStyleControls/index.js","components/InlineStyleControls/index.js","components/EditorContainer/index.js","Queries.js","App.js","reportWebVitals.js","index.js"],"names":["CREATE_NOTE","gql","UPDATE_NOTE","DELETE_NOTE","NotesContainer","error","loading","networkStatus","refetch","notes","selectedNote","setSelectedNote","useMutation","deleteNote","mutationLoading","mutationError","handleDelete","id","a","variables","className","NetworkStatus","Array","from","length","map","_","i","note","isActive","parsedPost","EditorState","createWithContent","convertFromRaw","JSON","parse","body","classnames","onClick","editorState","readOnly","StyleButton","style","active","label","onToggle","onMouseDown","e","preventDefault","handleToggle","BLOCK_TYPES","INLINE_STYLES","EDITOR_STYLE_MAP","CODE","backgroundColor","fontFamily","fontSize","padding","BlockStyleControls","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","getType","type","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","EditorContainer","editor","useRef","useState","setLoading","successMsg","setSuccessMsg","errorMsg","setErrorMsg","createEmpty","setEditorState","createNote","updateNote","useEffect","focusEditor","onChange","current","focus","isSubmittable","convertToRaw","blocks","some","text","trim","save","contentState","request","stringify","saveNote","console","log","RichUtils","toggleBlockType","inlineStyle","toggleInlineStyle","ref","blockStyleFn","block","customStyleMap","disabled","ALL_NOTES","App","setNotes","useQuery","notifyOnNetworkStatusChange","data","allNotes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6912d377.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nconst CREATE_NOTE = gql`mutation createNote($body: String!) {\n    createNote(body: $body) {\n        id,\n        createdAt,\n        updatedAt,\n        body\n    }\n}`;\n\n\nconst UPDATE_NOTE = gql`mutation updateNote($id: ID! $body: String!) {\n    updateNote(id: $id body: $body) {\n        id,\n        createdAt,\n        updatedAt,\n        body\n    }\n}`;\n\nconst DELETE_NOTE = gql`mutation deleteNote($id: ID!) {\n    deleteNote(id: $id) {\n        id,\n        createdAt,\n        updatedAt,\n        body\n    }\n}`;\n\n\nexport { CREATE_NOTE, UPDATE_NOTE, DELETE_NOTE };\n\n\n\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useMutation, NetworkStatus } from '@apollo/client';\nimport { List } from 'react-content-loader';\nimport { Editor, convertFromRaw, EditorState } from 'draft-js';\n\nimport { DELETE_NOTE } from '../../Mutations';\n\nimport './notes_container.css'\n\nconst NotesContainer = ({\n    error,\n    loading,\n    networkStatus,\n    refetch,\n    notes,\n    selectedNote,\n    setSelectedNote\n}) => {\n    const [deleteNote, { loading: mutationLoading, error: mutationError }] = useMutation(DELETE_NOTE);\n\n    const handleDelete = async (id) => {\n        await deleteNote({\n            variables: {\n                id\n            }\n        })\n        refetch();\n    }\n\n    const renderNotes = () => {\n        if (loading || mutationLoading || networkStatus === NetworkStatus.refetch) {\n            return Array.from(Array(notes.length)).map((_, i) => <List className=\"box\" key={i} />)\n        } else if (error) {\n            return <p>{`Error! ${error}`}</p>\n        }\n\n        return notes.map((note, i) => {\n            const isActive = selectedNote ? selectedNote.id === note.id : false;\n            const parsedPost = EditorState.createWithContent(convertFromRaw(JSON.parse(note.body)));\n            return (\n                <section key={i} className={classnames('box', isActive ? 'active-post' : '')}>\n                    <div onClick={() => setSelectedNote(note)}>\n                        <Editor editorState={parsedPost} readOnly />\n                    </div>\n                    <button className=\"btn small\" onClick={() => handleDelete(note.id)}>Delete Note</button>\n                    {mutationError && <p className=\"error\">Error occurred when deleting note</p>}\n                </section>\n            )\n        })\n    }\n\n    return (\n        <div className=\"notes_container_wrapper\">\n            <h2 className=\"ml-1\">Notes</h2>\n            {renderNotes()}\n        </div>\n    )\n}\n\nexport default NotesContainer;","import React from 'react';\n\nimport './style_button.css';\n\nconst StyleButton = ({ style, active, label, onToggle }) => {\n\n    const handleToggle = e => {\n        e.preventDefault();\n        onToggle(style)\n    }\n\n    const className = active ? 'RichEditor-activeButton' : 'RichEditor-styleButton';\n\n    return (\n        <span className={className} onMouseDown={e => handleToggle(e)}>\n            {label}\n        </span>\n    );\n}\n\nexport default StyleButton;","const BLOCK_TYPES = [\n    { label: 'H1', style: 'header-one' },\n    { label: 'H2', style: 'header-two' },\n    { label: 'H3', style: 'header-three' },\n    { label: 'H4', style: 'header-four' },\n    { label: 'H5', style: 'header-five' },\n    { label: 'H6', style: 'header-six' },\n    { label: 'Blockquote', style: 'blockquote' },\n    { label: 'UL', style: 'unordered-list-item' },\n    { label: 'OL', style: 'ordered-list-item' },\n    { label: 'Code Block', style: 'code-block' },\n];\n\nconst INLINE_STYLES = [\n    { label: 'Bold', style: 'BOLD' },\n    { label: 'Italic', style: 'ITALIC' },\n    { label: 'Underline', style: 'UNDERLINE' },\n    { label: 'Monospace', style: 'CODE' },\n];\n\nconst EDITOR_STYLE_MAP = {\n    CODE: {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 3,\n    },\n};\n\nexport { BLOCK_TYPES, INLINE_STYLES, EDITOR_STYLE_MAP };","import React from 'react';\nimport StyleButton from '../StyleButton';\n\nimport { BLOCK_TYPES } from '../../constants';\n\nconst BlockStyleControls = ({ editorState, onToggle }) => {\n    const selection = editorState.getSelection();\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n\n    const renderBlockTypes = () => {\n        return BLOCK_TYPES.map((type) =>\n            <StyleButton\n                key={type.label}\n                active={type.style === blockType}\n                label={type.label}\n                onToggle={onToggle}\n                style={type.style}\n            />\n        )\n    }\n\n    return (\n        <>\n            <p className=\"bold ml-1\">Block Style Controls</p>\n            <div className=\"RichEditor-controls\">\n                {renderBlockTypes()}\n            </div>\n\n        </>\n    );\n};\n\nexport default BlockStyleControls;","import React from 'react';\nimport StyleButton from '../StyleButton';\n\nimport { INLINE_STYLES } from '../../constants';\n\nconst InlineStyleControls = ({ editorState, onToggle }) => {\n    const currentStyle = editorState.getCurrentInlineStyle();\n\n    const renderControls = () => {\n        return INLINE_STYLES.map((type) =>\n            <StyleButton\n                key={type.label}\n                active={currentStyle.has(type.style)}\n                label={type.label}\n                onToggle={onToggle}\n                style={type.style}\n            />\n        )\n    }\n\n    return (\n        <>\n            <p className=\"bold ml-1\">Inline Style Controls</p>\n            <div className=\"RichEditor-controls\">\n                {renderControls()}\n            </div>\n        </>\n    );\n};\n\nexport default InlineStyleControls;","import React, { useState, useEffect, useRef } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Editor, EditorState, RichUtils, convertFromRaw, convertToRaw } from 'draft-js';\n\nimport BlockStyleControls from '../BlockStyleControls';\nimport InlineStyleControls from '../InlineStyleControls';\n\nimport { EDITOR_STYLE_MAP } from '../../constants';\nimport { CREATE_NOTE, UPDATE_NOTE } from '../../Mutations';\n\nimport './editor_container.css';\n\nconst EditorContainer = ({ refetch, selectedNote, setSelectedNote }) => {\n    const editor = useRef(null);\n    const [loading, setLoading] = useState(false);\n    const [successMsg, setSuccessMsg] = useState('');\n    const [errorMsg, setErrorMsg] = useState('');\n    const [editorState, setEditorState] = useState(\n        EditorState.createEmpty()\n    );\n    const [createNote] = useMutation(CREATE_NOTE);\n    const [updateNote] = useMutation(UPDATE_NOTE);\n\n    useEffect(() => {\n        focusEditor();\n    }, []);\n\n    useEffect(() => {\n        if (selectedNote) {\n            onChange(EditorState.createWithContent(convertFromRaw(JSON.parse(selectedNote.body))))\n        }\n    }, [selectedNote]);\n\n    const focusEditor = () => {\n        editor.current.focus();\n    }\n\n    const onChange = editorState => setEditorState(editorState);\n\n    const toggleBlockType = (blockType) => {\n        onChange(\n            RichUtils.toggleBlockType(\n                editorState,\n                blockType\n            )\n        );\n    }\n\n    const toggleInlineStyle = (inlineStyle) => {\n        onChange(\n            RichUtils.toggleInlineStyle(\n                editorState,\n                inlineStyle\n            )\n        );\n    }\n\n    const getBlockStyle = (block) => {\n        switch (block.getType()) {\n            case 'blockquote': return 'RichEditor-blockquote';\n            default: return null;\n        }\n    }\n\n    const isSubmittable = () => {\n        return convertToRaw(editorState.getCurrentContent()).blocks.some(({ text }) => text.trim())\n    };\n\n    const getButtonText = () => {\n        let btnText = '';\n\n        if (loading) {\n            btnText = 'Saving...'\n        } else if (selectedNote) {\n            btnText = 'Update'\n        } else {\n            btnText = 'Save'\n        }\n\n        return btnText;\n    }\n\n    const save = (contentState) => {\n        const request = {\n            variables: {\n                body: JSON.stringify(contentState)\n            }\n        }\n\n        if (selectedNote) {\n            return updateNote({\n                ...request,\n                variables: {\n                    ...request.variables,\n                    id: selectedNote.id\n                }\n            });\n        }\n\n        return createNote(request);\n    }\n\n    const saveNote = async () => {\n        setSuccessMsg('');\n        setErrorMsg('');\n        setLoading(true);\n        const contentState = convertToRaw(editorState.getCurrentContent());\n        if (isSubmittable()) {\n            try {\n                await save(contentState);\n                setSuccessMsg('Successfully saved note!');\n                refetch();\n            } catch (e) {\n                console.log(e, 'e')\n                setErrorMsg('Error saving note :(')\n            } finally {\n                setLoading(false);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <section className=\"flex space-between\">\n                <h2 className=\"ml-1\">{selectedNote ? 'Update' : 'Create'} Note</h2>\n                {selectedNote && <button className=\"btn primary small\" onClick={() => setSelectedNote(null)}>New Note +</button>}\n            </section>\n            <BlockStyleControls\n                editorState={editorState}\n                onToggle={toggleBlockType}\n            />\n            <InlineStyleControls\n                editorState={editorState}\n                onToggle={toggleInlineStyle}\n            />\n            <Editor\n                ref={editor}\n                editorState={editorState}\n                onChange={onChange}\n                blockStyleFn={getBlockStyle}\n                customStyleMap={EDITOR_STYLE_MAP}\n            />\n            <div className=\"btn-wrapper\">\n                <button disabled={loading || !isSubmittable()} className=\"btn primary\" onClick={() => saveNote()}>{getButtonText()}</button>\n            </div>\n            {successMsg && <p className=\"success right\">{successMsg}</p>}\n            {errorMsg && <p className=\"error right\">{errorMsg}</p>}\n        </div >\n    );\n}\n\nexport default EditorContainer;","import { gql } from '@apollo/client';\n\nconst ALL_NOTES = gql`\n    query {\n        allNotes {\n            id,\n            createdAt,\n            updatedAt,\n            body\n        }\n    }\n`\n\nexport { ALL_NOTES };","import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport NotesContainer from './components/NotesContainer';\nimport EditorContainer from './components/EditorContainer';\n\nimport { ALL_NOTES } from './Queries';\nimport './App.css';\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const { error, loading, data, refetch, networkStatus } = useQuery(\n    ALL_NOTES,\n    { notifyOnNetworkStatusChange: true }\n  );\n\n  useEffect(() => {\n    if (data && data.allNotes) {\n      setNotes(data.allNotes);\n    }\n  }, [data])\n\n  return (\n    <div className=\"app-wrapper box\">\n      <NotesContainer\n        error={error}\n        loading={loading}\n        networkStatus={networkStatus}\n        refetch={refetch}\n        notes={notes}\n        selectedNote={selectedNote}\n        setSelectedNote={setSelectedNote}\n      />\n      <EditorContainer\n        refetch={refetch}\n        selectedNote={selectedNote}\n        setSelectedNote={setSelectedNote}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}